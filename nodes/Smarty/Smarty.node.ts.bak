import type {
	INodeType,
	INodeTypeDescription,
	IExecuteFunctions,
	INodeExecutionData,
	IDataObject,
	IRequestOptions,
} from 'n8n-workflow';
import { NodeOperationError, NodeConnectionType } from 'n8n-workflow';

export class Smarty implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Smarty',
		name: 'smarty',
		icon: 'file:smarty.svg',
		group: ['utility'],
		version: 1,
		subtitle: '={{$parameter["operation"]}}',
		description: 'Verify a US address using Google Geocoding API with FREE USPS mail safety validation',
		defaults: {
			name: 'Smarty',
		},
		inputs: [NodeConnectionType.Main],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'googleApi',
				required: true,
			},
			{
				name: 'uspsApi',
				required: false,
				displayOptions: {
					show: {
						'options.useUspsMailSafety': [true],
					},
				},
			},
			{
				name: 'smartyApi',
				required: false,
				displayOptions: {
					show: {
						'options.useSmartyFallback': [true],
					},
				},
			},
		],
		properties: [
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				options: [
					{
						name: 'Verify US Address',
						value: 'verifyUSAddress',
						description: 'Verify a US address using Google Geocoding API with FREE USPS mail safety validation',
						action: 'Verify a US address',
					},
				],
				default: 'verifyUSAddress',
			},
			// Address input fields
			{
				displayName: 'Street Address',
				name: 'street',
				type: 'string',
				default: '',
				description: 'Street address (e.g., "1 E Main St")',
				required: true,
			},
			{
				displayName: 'Street 2 (Optional)',
				name: 'street2',
				type: 'string',
				default: '',
				description: 'Secondary address line (e.g., "Apt 2", "Suite 100")',
			},
			{
				displayName: 'City',
				name: 'city',
				type: 'string',
				default: '',
				description: 'City name',
			},
			{
				displayName: 'State',
				name: 'state',
				type: 'string',
				default: '',
				description: 'State abbreviation (e.g., "CA", "NY")',
			},
			{
				displayName: 'ZIP Code',
				name: 'zipcode',
				type: 'string',
				default: '',
				description: 'ZIP or ZIP+4 code',
			},
			// Options
			{
				displayName: 'Options',
				name: 'options',
				type: 'collection',
				placeholder: 'Add Option',
				default: {},
				options: [
					{
						displayName: 'Include Invalid',
						name: 'includeInvalid',
						type: 'boolean',
						default: false,
						description: 'Whether to include invalid addresses in the results',
					},
					{
						displayName: 'Use USPS Mail Safety Check',
						name: 'useUspsMailSafety',
						type: 'boolean',
						default: true,
						description: 'Validate addresses without house numbers using FREE USPS API for mail deliverability. Ensures addresses can actually receive mail. No monthly fees!',
					},
					{
						displayName: 'Use SmartyStreets Fallback',
						name: 'useSmartyFallback',
						type: 'boolean',
						default: false,
						description: 'Try SmartyStreets if Google fails. Provides CASS certification and postal delivery validation for bulk mail campaigns. Requires active SmartyStreets subscription.',
					},
					{
						displayName: 'Always Return Data',
						name: 'alwaysReturnData',
						type: 'boolean',
						default: true,
						description: 'Whether to always return data even when address cannot be verified (prevents empty output)',
					},
					{
						displayName: 'Continue On Fail',
						name: 'continueOnFail',
						type: 'boolean',
						default: false,
						description: 'Whether to continue workflow execution when the API request fails',
					},
				],
			},
		],
	};

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: INodeExecutionData[] = [];

		const googleCredentials = await this.getCredentials('googleApi');
		const googleApiKey = googleCredentials.apiKey as string;

		// Helper function to validate address with USPS API for mail deliverability
		const validateWithUSPS = async (address: string, useUspsMailSafety: boolean): Promise<{isDeliverable: boolean, uspsData?: any, error?: string}> => {
			if (!useUspsMailSafety) {
				return { isDeliverable: true }; // Skip validation if not enabled
			}

			try {
				const uspsCredentials = await this.getCredentials('uspsApi');
				const uspsUserId = uspsCredentials.userId as string;

				// Parse address components for USPS API
				const addressParts = address.split(',').map(part => part.trim());
				const streetAddress = addressParts[0] || '';
				const cityStateZip = addressParts.slice(1).join(', ');

				// Try to extract city, state, and zip from the remaining parts
				const cityStateZipMatch = cityStateZip.match(/^(.+?),?\s*([A-Z]{2})\s*(\d{5}(?:-\d{4})?)?$/);
				const city = cityStateZipMatch?.[1] || '';
				const state = cityStateZipMatch?.[2] || '';
				const zip = cityStateZipMatch?.[3] || '';

				// Build USPS XML request
				const xmlRequest = `<AddressValidateRequest USERID="${uspsUserId}">
					<Revision>1</Revision>
					<Address ID="0">
						<Address1></Address1>
						<Address2>${streetAddress}</Address2>
						<City>${city}</City>
						<State>${state}</State>
						<Zip5>${zip.split('-')[0]}</Zip5>
						<Zip4>${zip.split('-')[1] || ''}</Zip4>
					</Address>
				</AddressValidateRequest>`;

				const uspsOptions: IRequestOptions = {
					method: 'GET',
					url: 'https://secure.shippingapis.com/ShippingAPI.dll',
					qs: {
						API: 'Verify',
						XML: xmlRequest,
					},
					headers: {
						'Accept': 'application/xml',
					},
					resolveWithFullResponse: true,
				};

				const uspsResponse = await this.helpers.request(uspsOptions);

				// Parse XML response (basic parsing for now)
				const xmlData = uspsResponse.body as string;

				// Check if the response contains an error
				if (xmlData.includes('<Error>')) {
					return { isDeliverable: false, error: 'USPS validation error' };
				}

				// Check if the response contains address data (basic check)
				if (xmlData.includes('<Address2>') && xmlData.includes('<City>') && xmlData.includes('<State>')) {
					// Extract some basic USPS data for debugging
					const cityMatch = xmlData.match(/<City>([^<]+)<\/City>/);
					const stateMatch = xmlData.match(/<State>([^<]+)<\/State>/);
					const zipMatch = xmlData.match(/<Zip5>([^<]+)<\/Zip5>/);

					const uspsData = {
						city: cityMatch?.[1] || '',
						state: stateMatch?.[1] || '',
						zip: zipMatch?.[1] || '',
						raw_response: xmlData
					};

					return { isDeliverable: true, uspsData };
				}

				return { isDeliverable: false, error: 'USPS could not verify address' };

			} catch (error) {
				return { isDeliverable: false, error: `USPS API error: ${error.message}` };
			}
		};

		// Helper function to determine if Google result represents a deliverable address
		const isDeliverableAddress = (result: any) => {
			const types = result.types || [];
			const geometry = result.geometry || {};
			const locationType = geometry.location_type || 'APPROXIMATE';

			// Good types - indicate specific deliverable locations
			const goodTypes = ['street_address', 'premise', 'establishment', 'point_of_interest'];
			// Bad types - indicate vague geographic areas
			const vagueTypes = ['route', 'political', 'administrative_area_level_1', 'administrative_area_level_2', 'locality', 'neighborhood'];

			// If it has any good types, it's probably deliverable
			if (types.some((type: string) => goodTypes.includes(type))) {
				return true;
			}

			// If it only has vague types, it's NOT deliverable
			if (types.every((type: string) => vagueTypes.includes(type))) {
				return false;
			}

			// For mixed results, check location precision
			// ROOFTOP and RANGE_INTERPOLATED are more likely to be deliverable
			const isPrecise = ['ROOFTOP', 'RANGE_INTERPOLATED'].includes(locationType);

			// If it has street components AND is precise, likely deliverable
			const hasStreetNumber = result.address_components?.some((comp: any) => comp.types.includes('street_number'));
			const hasRoute = result.address_components?.some((comp: any) => comp.types.includes('route'));

			// For rural addresses without street numbers, if it's precise it might still be deliverable
			return isPrecise && hasRoute;
		};

		for (let i = 0; i < items.length; i++) {
			try {
				const operation = this.getNodeParameter('operation', i) as string;

				if (operation === 'verifyUSAddress') {
					// Build the request parameters
					const street = this.getNodeParameter('street', i) as string;
					const street2 = this.getNodeParameter('street2', i, '') as string;
					const city = this.getNodeParameter('city', i, '') as string;
					const state = this.getNodeParameter('state', i, '') as string;
					const zipcode = this.getNodeParameter('zipcode', i, '') as string;

					const options = this.getNodeParameter('options', i, {}) as IDataObject;
					const includeInvalid = options.includeInvalid as boolean || false;
					const useUspsMailSafety = options.useUspsMailSafety as boolean || true;
					const useSmartyFallback = options.useSmartyFallback as boolean || false;
					const alwaysReturnData = options.alwaysReturnData as boolean || true;

					// Check if this is an intersection format - if so, skip special processing and go straight to Google
					const isIntersection = street && (street.includes('/') || street.includes(' & ') || street.includes(' and '));
					let resultData: any[] = [];

					if (isIntersection) {
						// Skip detailed validation for intersections, go directly to Google
						try {
							// Build full address string for Google
							const fullAddress = [street, street2, city, state, zipcode].filter(Boolean).join(', ');

							const googleOptions: IRequestOptions = {
								method: 'GET',
								url: 'https://maps.googleapis.com/maps/api/geocode/json',
								qs: {
									address: fullAddress,
									key: googleApiKey,
								},
								headers: {
									'Accept': 'application/json',
								},
								json: true,
								resolveWithFullResponse: true,
							};

							const googleResponse = await this.helpers.request(googleOptions);

							if (googleResponse.body?.results?.length > 0) {
								// Transform Google response to SmartyStreets format for intersections
								resultData = googleResponse.body.results.map((result: any) => {
									const addressComponents = result.address_components || [];
									const geometry = result.geometry || {};
									const location = geometry.location || {};

									// Parse address components
									const streetNumber = addressComponents.find((comp: any) => comp.types.includes('street_number'))?.long_name || '';
									const route = addressComponents.find((comp: any) => comp.types.includes('route'))?.long_name || '';
									const city = addressComponents.find((comp: any) => comp.types.includes('locality'))?.long_name || '';
									const state = addressComponents.find((comp: any) => comp.types.includes('administrative_area_level_1'))?.short_name || '';
									const zipcode = addressComponents.find((comp: any) => comp.types.includes('postal_code'))?.long_name || '';
									const county = addressComponents.find((comp: any) => comp.types.includes('administrative_area_level_2'))?.long_name || '';

									// Build delivery line
									const deliveryLine = [streetNumber, route].filter(Boolean).join(' ') || street;
									const lastLine = [city, state, zipcode].filter(Boolean).join(' ');

									// Determine precision based on Google's location_type
									const locationType = geometry.location_type || 'APPROXIMATE';
									let precision = 'Unknown';
									switch (locationType) {
										case 'ROOFTOP': precision = 'Zip9'; break;
										case 'RANGE_INTERPOLATED': precision = 'Zip7'; break;
										case 'GEOMETRIC_CENTER': precision = 'Zip5'; break;
										case 'APPROXIMATE': precision = 'Zip5'; break;
									}

									return {
										input_index: 0,
										candidate_index: 0,
										delivery_line_1: deliveryLine,
										last_line: lastLine,
										delivery_point_barcode: '',
										components: {
											primary_number: streetNumber,
											street_name: route.replace(/\s+(St|Street|Rd|Road|Ave|Avenue|Dr|Drive|Ln|Lane|Ct|Court|Pl|Place|Way|Blvd|Boulevard)$/i, '') || street,
											street_suffix: route.match(/\s+(St|Street|Rd|Road|Ave|Avenue|Dr|Drive|Ln|Lane|Ct|Court|Pl|Place|Way|Blvd|Boulevard)$/i)?.[1] || '',
											city_name: city,
											default_city_name: city,
											state_abbreviation: state,
											zipcode: zipcode.split('-')[0] || '',
											plus4_code: zipcode.split('-')[1] || '',
										},
										metadata: {
											record_type: 'I', // 'I' for Intersection
											zip_type: 'Standard',
											county_fips: '',
											county_name: county.replace(/\s+County$/i, ''),
											carrier_route: '',
											congressional_district: '',
											rdi: 'Intersection',
											elot_sequence: '',
											elot_sort: '',
											latitude: location.lat || 0,
											longitude: location.lng || 0,
											precision: precision,
											time_zone: 'Unknown',
											utc_offset: 0,
											dst: false
										},
										analysis: {
											dpv_match_code: 'I', // 'I' for Intersection
											dpv_footnotes: 'INTERSECTION',
											dpv_cmra: 'N',
											dpv_vacant: 'N',
											dpv_no_stat: 'N',
											active: 'Y'
										},
										verification_status: 'intersection_verified',
										api_status_code: 200,
										api_provider: 'google_intersection',
										place_id: result.place_id,
										formatted_address: result.formatted_address,
										location_type: locationType,
										intersection_detected: true
									};
								});
							}
						} catch (googleError) {
							// Google failed for intersection
							if (alwaysReturnData) {
								resultData = [{
									verification_status: 'unverified',
									input_street: street,
									input_street2: street2,
									input_city: city,
									input_state: state,
									input_zipcode: zipcode,
									message: 'Intersection detected - Google geocoding failed',
									api_response: 'intersection_google_error',
									api_status_code: 0,
									google_error: googleError.message,
									intersection_detected: true
								}];
							}
						}
					} else if (!street || street.trim() === '') {
						// Handle empty/null street addresses
						if (alwaysReturnData) {
							resultData = [{
								verification_status: 'unverified',
								input_street: street,
								input_street2: street2,
								input_city: city,
								input_state: state,
								input_zipcode: zipcode,
								message: 'Street address is empty or null',
								api_response: 'empty_street',
								api_status_code: 0
							}];
						}
					} else {
						// Normal flow: Google first with USPS mail safety validation
						const fullAddress = [street, street2, city, state, zipcode].filter(Boolean).join(', ');

						try {
							// Try Google first
							const googleOptions: IRequestOptions = {
								method: 'GET',
								url: 'https://maps.googleapis.com/maps/api/geocode/json',
								qs: {
									address: fullAddress,
									key: googleApiKey,
								},
								headers: {
									'Accept': 'application/json',
								},
								json: true,
								resolveWithFullResponse: true,
							};

							const googleResponse = await this.helpers.request(googleOptions);

							if (googleResponse.body?.results?.length > 0) {
								// Filter to only deliverable addresses
								const deliverableResults = googleResponse.body.results.filter(isDeliverableAddress);

								if (deliverableResults.length > 0) {
									// Check if any results need USPS mail safety validation (no house number)
									const validatedResults = [];

									for (const result of deliverableResults) {
										const addressComponents = result.address_components || [];
										const streetNumber = addressComponents.find((comp: any) => comp.types.includes('street_number'))?.long_name || '';

										// If no house number and USPS validation is enabled, check mail deliverability
										if (!streetNumber && useUspsMailSafety) {
											const uspsValidation = await validateWithUSPS(fullAddress, useUspsMailSafety);

											if (uspsValidation.isDeliverable) {
												// USPS says it's deliverable, keep this result
												validatedResults.push({ result, uspsValidation });
											}
											// If not deliverable according to USPS, skip this result
										} else {
											// Has house number or USPS validation disabled, keep result
											validatedResults.push({ result, uspsValidation: null });
										}
									}

									if (validatedResults.length > 0) {
										// Transform validated Google results to SmartyStreets format
										resultData = validatedResults.map(({ result, uspsValidation }) => {
											const addressComponents = result.address_components || [];
											const geometry = result.geometry || {};
											const location = geometry.location || {};

											// Parse address components
											const streetNumber = addressComponents.find((comp: any) => comp.types.includes('street_number'))?.long_name || '';
											const route = addressComponents.find((comp: any) => comp.types.includes('route'))?.long_name || '';
											const city = addressComponents.find((comp: any) => comp.types.includes('locality'))?.long_name || '';
											const state = addressComponents.find((comp: any) => comp.types.includes('administrative_area_level_1'))?.short_name || '';
											const zipcode = addressComponents.find((comp: any) => comp.types.includes('postal_code'))?.long_name || '';
											const county = addressComponents.find((comp: any) => comp.types.includes('administrative_area_level_2'))?.long_name || '';

											// Build delivery line
											const deliveryLine = [streetNumber, route].filter(Boolean).join(' ');
											const lastLine = [city, state, zipcode].filter(Boolean).join(' ');

											// Determine precision based on Google's location_type
											const locationType = geometry.location_type || 'APPROXIMATE';
											let precision = 'Unknown';
											switch (locationType) {
												case 'ROOFTOP': precision = 'Zip9'; break;
												case 'RANGE_INTERPOLATED': precision = 'Zip7'; break;
												case 'GEOMETRIC_CENTER': precision = 'Zip5'; break;
												case 'APPROXIMATE': precision = 'Zip5'; break;
											}

											return {
												input_index: 0,
												candidate_index: 0,
												delivery_line_1: deliveryLine,
												last_line: lastLine,
												delivery_point_barcode: '',
												components: {
													primary_number: streetNumber,
													street_name: route.replace(/\s+(St|Street|Rd|Road|Ave|Avenue|Dr|Drive|Ln|Lane|Ct|Court|Pl|Place|Way|Blvd|Boulevard)$/i, '') || street,
													street_suffix: route.match(/\s+(St|Street|Rd|Road|Ave|Avenue|Dr|Drive|Ln|Lane|Ct|Court|Pl|Place|Way|Blvd|Boulevard)$/i)?.[1] || '',
													city_name: city,
													default_city_name: city,
													state_abbreviation: state,
													zipcode: zipcode.split('-')[0] || '',
													plus4_code: zipcode.split('-')[1] || '',
												},
												metadata: {
													record_type: 'S',
													zip_type: 'Standard',
													county_fips: '',
													county_name: county.replace(/\s+County$/i, ''),
													carrier_route: '',
													congressional_district: '',
													rdi: 'Commercial',
													elot_sequence: '',
													elot_sort: '',
													latitude: location.lat || 0,
													longitude: location.lng || 0,
													precision: precision,
													time_zone: 'Unknown',
													utc_offset: 0,
													dst: false
												},
												analysis: {
													dpv_match_code: 'Y',
													dpv_footnotes: 'AABB',
													dpv_cmra: 'N',
													dpv_vacant: 'N',
													dpv_no_stat: 'N',
													active: 'Y'
												},
												verification_status: uspsValidation ? 'google_usps_verified' : 'google_verified',
												api_status_code: 200,
												api_provider: uspsValidation ? 'google_usps_validated' : 'google_primary',
												place_id: result.place_id,
												formatted_address: result.formatted_address,
												location_type: locationType,
												usps_mail_safe: uspsValidation ? true : undefined,
												usps_validation_used: uspsValidation ? true : false,
												usps_data: uspsValidation?.uspsData
											};
										});
									} else if (useSmartyFallback) {
										// No results passed USPS validation, try SmartyStreets fallback
										try {
											const smartyCredentials = await this.getCredentials('smartyApi');
											const authId = smartyCredentials.authId as string;
											const authToken = smartyCredentials.authToken as string;

											// Build SmartyStreets query parameters
											const queryParams: IDataObject = {
												'auth-id': authId,
												'auth-token': authToken,
												'street': street,
											};

											// Add optional parameters if provided
											if (street2) queryParams['street2'] = street2;
											if (city) queryParams['city'] = city;
											if (state) queryParams['state'] = state;
											if (zipcode) queryParams['zipcode'] = zipcode;
											if (includeInvalid) queryParams['include_invalid'] = 'true';

											// Make the SmartyStreets API request
											const smartyOptions: IRequestOptions = {
												method: 'GET',
												url: 'https://us-street.api.smartystreets.com/street-address',
												qs: queryParams,
												headers: {
													'Accept': 'application/json',
												},
												json: true,
												resolveWithFullResponse: true,
											};

											const smartyResponse = await this.helpers.request(smartyOptions);

											if (smartyResponse.body?.length > 0) {
												// Use SmartyStreets result
												resultData = smartyResponse.body.map((result: any) => ({
													...result,
													verification_status: 'smarty_verified',
													api_status_code: smartyResponse.statusCode,
													api_provider: 'smarty_fallback'
												}));
											}
										} catch (smartyError) {
											console.log('SmartyStreets fallback failed:', smartyError.message);
										}
									}
								} else if (useSmartyFallback) {
									// No deliverable Google results, try SmartyStreets fallback
									try {
										const smartyCredentials = await this.getCredentials('smartyApi');
										const authId = smartyCredentials.authId as string;
										const authToken = smartyCredentials.authToken as string;

										// Build SmartyStreets query parameters
										const queryParams: IDataObject = {
											'auth-id': authId,
											'auth-token': authToken,
											'street': street,
										};

										// Add optional parameters if provided
										if (street2) queryParams['street2'] = street2;
										if (city) queryParams['city'] = city;
										if (state) queryParams['state'] = state;
										if (zipcode) queryParams['zipcode'] = zipcode;
										if (includeInvalid) queryParams['include_invalid'] = 'true';

										// Make the SmartyStreets API request
										const smartyOptions: IRequestOptions = {
											method: 'GET',
											url: 'https://us-street.api.smartystreets.com/street-address',
											qs: queryParams,
											headers: {
												'Accept': 'application/json',
											},
											json: true,
											resolveWithFullResponse: true,
										};

										const smartyResponse = await this.helpers.request(smartyOptions);

										if (smartyResponse.body?.length > 0) {
											// Use SmartyStreets result
											resultData = smartyResponse.body.map((result: any) => ({
												...result,
												verification_status: 'smarty_verified',
												api_status_code: smartyResponse.statusCode,
												api_provider: 'smarty_fallback'
											}));
										}
									} catch (smartyError) {
										console.log('SmartyStreets fallback failed:', smartyError.message);
									}
								}
							} else if (useSmartyFallback) {
								// No deliverable Google results, try SmartyStreets fallback
								try {
									const smartyCredentials = await this.getCredentials('smartyApi');
									const authId = smartyCredentials.authId as string;
									const authToken = smartyCredentials.authToken as string;

									// Build SmartyStreets query parameters
									const queryParams: IDataObject = {
										'auth-id': authId,
										'auth-token': authToken,
										'street': street,
									};

									// Add optional parameters if provided
									if (street2) queryParams['street2'] = street2;
									if (city) queryParams['city'] = city;
									if (state) queryParams['state'] = state;
									if (zipcode) queryParams['zipcode'] = zipcode;
									if (includeInvalid) queryParams['include_invalid'] = 'true';

									// Make the SmartyStreets API request
									const smartyOptions: IRequestOptions = {
										method: 'GET',
										url: 'https://us-street.api.smartystreets.com/street-address',
										qs: queryParams,
										headers: {
											'Accept': 'application/json',
										},
										json: true,
										resolveWithFullResponse: true,
									};

									const smartyResponse = await this.helpers.request(smartyOptions);

									if (smartyResponse.body?.length > 0) {
										// Use SmartyStreets result
										resultData = smartyResponse.body.map((result: any) => ({
											...result,
											verification_status: 'smarty_verified',
											api_status_code: smartyResponse.statusCode,
											api_provider: 'smarty_error_fallback'
										}));
									}
								} catch (smartyError) {
									console.log('SmartyStreets fallback also failed:', smartyError.message);

									if (alwaysReturnData) {
										resultData = [{
											verification_status: 'unverified',
											input_street: street,
											input_street2: street2,
											input_city: city,
											input_state: state,
											input_zipcode: zipcode,
											message: 'Both Google and SmartyStreets failed',
											api_response: 'both_failed',
											api_status_code: 0,
											google_error: googleError.message,
											smarty_error: smartyError.message
										}];
									}
								}
							} else if (alwaysReturnData) {
								resultData = [{
									verification_status: 'unverified',
									input_street: street,
									input_street2: street2,
									input_city: city,
									input_state: state,
									input_zipcode: zipcode,
									message: 'Google failed, SmartyStreets fallback disabled',
									api_response: 'google_failed',
									api_status_code: 0,
									google_error: googleError.message
								}];
							}
						} catch (googleError) {
							console.log('Google primary failed:', googleError.message);

							// Google completely failed, try SmartyStreets fallback if enabled
							if (useSmartyFallback) {
								try {
									const smartyCredentials = await this.getCredentials('smartyApi');
									const authId = smartyCredentials.authId as string;
									const authToken = smartyCredentials.authToken as string;

									// Build SmartyStreets query parameters
									const queryParams: IDataObject = {
										'auth-id': authId,
										'auth-token': authToken,
										'street': street,
									};

									// Add optional parameters if provided
									if (street2) queryParams['street2'] = street2;
									if (city) queryParams['city'] = city;
									if (state) queryParams['state'] = state;
									if (zipcode) queryParams['zipcode'] = zipcode;
									if (includeInvalid) queryParams['include_invalid'] = 'true';

									// Make the SmartyStreets API request
									const smartyOptions: IRequestOptions = {
										method: 'GET',
										url: 'https://us-street.api.smartystreets.com/street-address',
										qs: queryParams,
										headers: {
											'Accept': 'application/json',
										},
										json: true,
										resolveWithFullResponse: true,
									};

									const smartyResponse = await this.helpers.request(smartyOptions);

									if (smartyResponse.body?.length > 0) {
										// Use SmartyStreets result
										resultData = smartyResponse.body.map((result: any) => ({
											...result,
											verification_status: 'smarty_verified',
											api_status_code: smartyResponse.statusCode,
											api_provider: 'smarty_error_fallback'
										}));
									}
								} catch (smartyError) {
									console.log('SmartyStreets fallback also failed:', smartyError.message);

									if (alwaysReturnData) {
										resultData = [{
											verification_status: 'unverified',
											input_street: street,
											input_street2: street2,
											input_city: city,
											input_state: state,
											input_zipcode: zipcode,
											message: 'Both Google and SmartyStreets failed',
											api_response: 'both_failed',
											api_status_code: 0,
											google_error: googleError.message,
											smarty_error: smartyError.message
										}];
									}
								}
							} else if (alwaysReturnData) {
								resultData = [{
									verification_status: 'unverified',
									input_street: street,
									input_street2: street2,
									input_city: city,
									input_state: state,
									input_zipcode: zipcode,
									message: 'Google failed, SmartyStreets fallback disabled',
									api_response: 'google_failed',
									api_status_code: 0,
									google_error: googleError.message
								}];
							}
						}
					}

					// If still no results and alwaysReturnData is true, return input data
					if (Array.isArray(resultData) && resultData.length === 0 && alwaysReturnData) {
						resultData = [{
							verification_status: 'unverified',
							input_street: street,
							input_street2: street2,
							input_city: city,
							input_state: state,
							input_zipcode: zipcode,
							message: useSmartyFallback ?
								'Address could not be verified by Google or SmartyStreets APIs' :
								'Address could not be verified by Google API',
							api_response: 'empty_result',
							api_status_code: 200
						}];
					}

					// Always process results regardless of whether we used Google or went to SmartyStreets fallback
					if (Array.isArray(resultData) && resultData.length > 0) {
						// Add verification status to successful results if not already present
						resultData = resultData.map((result: any) => ({
							...result,
							verification_status: result.verification_status || 'verified',
							api_status_code: result.api_status_code || 200
						}));
					}

					const executionData = this.helpers.constructExecutionMetaData(
						this.helpers.returnJsonArray(resultData),
						{ itemData: { item: i } },
					);
					returnData.push(...executionData);
				}
			} catch (error) {
				const continueOnFail = this.getNodeParameter('options.continueOnFail', i, false) as boolean;
				if (continueOnFail) {
					const executionErrorData = this.helpers.constructExecutionMetaData(
						this.helpers.returnJsonArray({ error: error.message }),
						{ itemData: { item: i } },
					);
					returnData.push(...executionErrorData);
					continue;
				}
				throw new NodeOperationError(this.getNode(), error, {
					itemIndex: i,
				});
			}
		}

		return [returnData];
	}
}
